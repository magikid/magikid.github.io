<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Api | Chris W Jones]]></title>
  <link href="http://magikid.github.io/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://magikid.github.io/"/>
  <updated>2015-04-08T22:12:23-04:00</updated>
  <id>http://magikid.github.io/</id>
  <author>
    <name><![CDATA[Chris W Jones]]></name>
    <email><![CDATA[chris@christopherjones.us]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using Active Model Serializers]]></title>
    <link href="http://magikid.github.io/52in52/api/2015/04/01/using-active-model-serializers/"/>
    <updated>2015-04-01T19:00:00-04:00</updated>
    <id>http://magikid.github.io/52in52/api/2015/04/01/using-active-model-serializers</id>
    <content type="html"><![CDATA[<p>Boy, this one is late. I blame moving. Hilary and I finally got the keys to our new place and have started moving in.  Last time I wrote about programming, I discussed APIs. In this post, I want to continue in the same theme and discuss implementing an API in a Rails application.</p>

<!-- more -->


<p>Rails has a great, simple way to output standard JSON instead of an HTML document.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/controllers/flashcards_controller.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FlashcardsController</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;render json: Deck.all</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>That block of code would output all of the Decks in the database as a JSON object.  The problem is that it doesn&rsquo;t give you much control over it.  What if you had a relation where each deck <code>has_many: cards</code>?  That controller wouldn&rsquo;t give you any indication about it.  That&rsquo;s where a handy gem called <a href="https://github.com/rails-api/active_model_serializers">active_model_serializers</a> comes in.  Active model serializers gives you very fine control over what is output in JSON.</p>

<p>The way it works is you create a file in the serializers directory for each model.  Then you can define exactly which attributes are output as JSON as well as how they&rsquo;re output.  This is what a simple AMS looks like for a model Deck(id: number, title:string, public: boolean, card_id: number).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>app/serializers/deck_serializer.rb </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DeckSerializer</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="no">ActiveModel</span><span class="o">::</span><span class="no">Serializer</span>
</span><span class='line'>  <span class="n">embed</span> <span class="ss">:ids</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  has_many :cards</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The attribute line specifies which parts of the model to expose in your API.  The has_many line tells AMS to expose that there decks and cards are related.  The neat part of this is the <code>embed :ids</code> line.  Taking that line out AMS will include the cards that are associated with the deck in the JSON response.  With that line in, AMS will simply give you the ids instead of the whole card object.</p>

<p>I love using AMS for creating JSON responses.  Next week I&rsquo;ll combine what I talked about APIs with AMS and Grape.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating an API]]></title>
    <link href="http://magikid.github.io/52in52/api/2015/03/18/creating-an-api/"/>
    <updated>2015-03-18T19:25:10-04:00</updated>
    <id>http://magikid.github.io/52in52/api/2015/03/18/creating-an-api</id>
    <content type="html"><![CDATA[<p>Part 1 in my series on creating an API in Rails.  Here&rsquo;s <a href="/52in52/api/2015/04/01/using-grape-api/">part 2</a>.</p>

<p>This week, I have been working hard to add an <abbr title="Application Programming Interface">API</abbr> to a website that I wrote.  I&rsquo;m going to explain what an API is and why I want one for this website.</p>

<p>When you visit a website, your browser uses a protocol called HTTP.  HTTP is made up of verbs that describe interactions with the server.  When you visit <a href="http://christopherjones.us"><a href="http://christopherjones.us">http://christopherjones.us</a></a>, your browser uses the HTTP verb GET because you want to &ldquo;get&rdquo; the page.  When you log in to a website, your browser uses the verb POST like you&rsquo;re mailing the data to the server.  There are a bunch of other verbs used as well but I&rsquo;m not going to get into them.<!-- more -->  After doing a GET request, the server located at <a href="http://christopherjones.us"><a href="http://christopherjones.us">http://christopherjones.us</a></a> responds with the page you requested, its response will look something like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;html&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span><span class="ni">&amp;lt;</span>head<span class="ni">&amp;gt;</span>
</span><span class='line'>    <span class="ni">&amp;lt;</span>title<span class="ni">&amp;gt;</span>Chris W Jones<span class="ni">&amp;lt;</span>/title<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>/head<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="ni">&amp;lt;</span>body<span class="ni">&amp;gt;</span>...<span class="ni">&amp;lt;</span>/body<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Believe it or not, that response is hard for a computer to read.  The difficulty comes from the fact that anything can be in between those <code>&lt;body&gt;</code> tags.  It could be a picture of a cat or it could be the entire text of the Illiad.  Computers don&rsquo;t do so well with that much ambigity which is why developers use APIs.  APIs are the computer&rsquo;s interface to a website.</p>

<p>When designing an API, developers think about what kinds of information that users will want to use from their site.  For example in my Bibliophilum website, I might have an API endpoint that allows users to request the books in their library.  Another endpoint might allow users to see which books are currently loaned from their library.  When a user wants the list of their books, they&rsquo;ll do a GET request to that endpoint and the server will respond with something that a computer can understand like:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="p">[</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;pre&gt;&lt;code&gt;</span><span class="p">{</span>
</span><span class='line'>    <span class="err">id:</span> <span class="err">1,</span>
</span><span class='line'>    <span class="err">title:</span> <span class="nt">&quot;Moby Dick&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">author:</span> <span class="nt">&quot;Herman Melville&quot;</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="err">id:</span> <span class="err">2,</span>
</span><span class='line'>    <span class="err">title:</span> <span class="nt">&quot;Accelerando&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="err">author:</span> <span class="nt">&quot;Charles Stross&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="p">]</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The format of the response from the server is usually documented and doesn&rsquo;t change.  This allows the computer using the API to understand the data received.</p>

<p>I really wanted to develop an API for this website because of a new trend in web development.  This trend is towards using a single page to serve the whole website and requesting the different pages in the background.  Gmail is a good example of a single page application (SPA) like this.</p>

<p>In the traditional client/server architecture, your browser sends a GET request to my server.  My server responds with the page.  You click the link which sends another GET request for that page which my server responds with.  In the SPA architecture, your browser sends a GET request for my main page.  After that, when you click a link on the page the page rewrites itself to be the new page, requesting additional data from the server as needed.</p>

<p>The main benefit of using this SPA is that the processing power my server would use to generate the page is offloaded to your browser saving me bandwidth and electricity.  The API comes into this when the SPA requets additional data as needed.  It needs to be able to understand the data so it queries the API.</p>

<p>That is an overview of what APIs are and one way that they&rsquo;re used.  Next week, I&rsquo;m going to explore a specific way to implement an API in Rails using a gem called Grape.</p>
]]></content>
  </entry>
  
</feed>
